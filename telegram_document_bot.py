# telegram_document_bot.py ‚Äî Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PDF –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
# -----------------------------------------------------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Intesa Sanpaolo:
#   /contratto ‚Äî –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä
#   /garanzia  ‚Äî –ø–∏—Å—å–º–æ –æ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–º –≤–∑–Ω–æ—Å–µ
#   /carta     ‚Äî –ø–∏—Å—å–º–æ –æ –≤—ã–ø—É—Å–∫–µ –∫–∞—Ä—Ç—ã
# -----------------------------------------------------------------------------
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å pdf_costructor.py API
# -----------------------------------------------------------------------------
import logging
import os
from io import BytesIO

from telegram import Update, InputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, ConversationHandler, MessageHandler, ContextTypes, filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ PDF –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
from pdf_costructor import (
    generate_contratto_pdf,
    generate_garanzia_pdf, 
    generate_carta_pdf,
    monthly_payment,
    format_money
)


# ---------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ------------------------------------------
TOKEN = os.getenv("BOT_TOKEN", "YOUR_TOKEN_HERE")
DEFAULT_TAN = 7.86
DEFAULT_TAEG = 8.30


logging.basicConfig(format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------ –°–æ—Å—Ç–æ—è–Ω–∏—è Conversation -------------------------------
CHOOSING_DOC, ASK_NAME, ASK_AMOUNT, ASK_DURATION, ASK_TAN, ASK_TAEG = range(6)

# ---------------------- PDF-—Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ API -------------------------
def build_contratto(data: dict) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–æ–≥–æ–≤–æ—Ä–∞ —á–µ—Ä–µ–∑ API pdf_costructor"""
    return generate_contratto_pdf(data)


def build_lettera_garanzia(name: str) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ API pdf_costructor"""
    return generate_garanzia_pdf(name)


def build_lettera_carta(data: dict) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –ø–∏—Å—å–º–∞ –æ –∫–∞—Ä—Ç–µ —á–µ—Ä–µ–∑ API pdf_costructor"""
    return generate_carta_pdf(data)


# ------------------------- Handlers -----------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    kb = [["/contratto", "/garanzia", "/carta"]]
    await update.message.reply_text(
        "Benvenuto! Scegli documento:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSING_DOC

async def choose_doc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    doc_type = update.message.text
    context.user_data['doc_type'] = doc_type
    await update.message.reply_text(
        "Inserisci nome e cognome del cliente:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    dt = context.user_data['doc_type']
    if dt == '/garanzia':
        try:
            buf = build_lettera_garanzia(name)
            await update.message.reply_document(InputFile(buf, f"Garanzia_{name}.pdf"))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ garanzia: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return await start(update, context)
    context.user_data['name'] = name
    await update.message.reply_text("Inserisci importo (‚Ç¨):")
    return ASK_AMOUNT

async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amt = float(update.message.text.replace('‚Ç¨','').replace(',','.').replace(' ',''))
    except:
        await update.message.reply_text("Importo non valido, riprova:")
        return ASK_AMOUNT
    context.user_data['amount'] = round(amt, 2)
    await update.message.reply_text("Inserisci durata (mesi):")
    return ASK_DURATION

async def ask_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        mn = int(update.message.text)
    except:
        await update.message.reply_text("Durata non valida, riprova:")
        return ASK_DURATION
    context.user_data['duration'] = mn
    await update.message.reply_text(f"Inserisci TAN (%), enter per {DEFAULT_TAN}%:")
    return ASK_TAN

async def ask_tan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    try:
        context.user_data['tan'] = float(txt.replace(',','.')) if txt else DEFAULT_TAN
    except:
        context.user_data['tan'] = DEFAULT_TAN
    await update.message.reply_text(f"Inserisci TAEG (%), enter per {DEFAULT_TAEG}%:")
    return ASK_TAEG

async def ask_taeg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    try:
        context.user_data['taeg'] = float(txt.replace(',','.')) if txt else DEFAULT_TAEG
    except:
        context.user_data['taeg'] = DEFAULT_TAEG
    
    d = context.user_data
    d['payment'] = monthly_payment(d['amount'], d['duration'], d['tan'])
    dt = d['doc_type']
    
    try:
        if dt == '/contratto':
            buf = build_contratto(d)
            filename = f"Contratto_{d['name']}.pdf"
        else:
            buf = build_lettera_carta(d)
            filename = f"Carta_{d['name']}.pdf"
            
        await update.message.reply_document(InputFile(buf, filename))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF {dt}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
    
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Operazione annullata.")
    return await start(update, context)

# ---------------------------- Main -------------------------------------------
def main():
    app = Application.builder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_DOC: [MessageHandler(filters.Regex(r'^(/contratto|/garanzia|/carta)$'), choose_doc)],
            ASK_NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_amount)],
            ASK_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_duration)],
            ASK_TAN:      [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_tan)],
            ASK_TAEG:     [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_taeg)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)],
    )
    app.add_handler(conv)
    
    print("ü§ñ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: /contratto, /garanzia, /carta")
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PDF –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ pdf_costructor.py")
    
    app.run_polling()

if __name__ == '__main__':
    main()
